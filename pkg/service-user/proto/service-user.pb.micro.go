// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/service-user.proto

package serviceuser

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ServiceUser service

func NewServiceUserEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ServiceUser service

type ServiceUserService interface {
	GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...client.CallOption) (*GetUserInfoResponse, error)
}

type serviceUserService struct {
	c    client.Client
	name string
}

func NewServiceUserService(name string, c client.Client) ServiceUserService {
	return &serviceUserService{
		c:    c,
		name: name,
	}
}

func (c *serviceUserService) GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...client.CallOption) (*GetUserInfoResponse, error) {
	req := c.c.NewRequest(c.name, "ServiceUser.GetUserInfo", in)
	out := new(GetUserInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ServiceUser service

type ServiceUserHandler interface {
	GetUserInfo(context.Context, *GetUserInfoRequest, *GetUserInfoResponse) error
}

func RegisterServiceUserHandler(s server.Server, hdlr ServiceUserHandler, opts ...server.HandlerOption) error {
	type serviceUser interface {
		GetUserInfo(ctx context.Context, in *GetUserInfoRequest, out *GetUserInfoResponse) error
	}
	type ServiceUser struct {
		serviceUser
	}
	h := &serviceUserHandler{hdlr}
	return s.Handle(s.NewHandler(&ServiceUser{h}, opts...))
}

type serviceUserHandler struct {
	ServiceUserHandler
}

func (h *serviceUserHandler) GetUserInfo(ctx context.Context, in *GetUserInfoRequest, out *GetUserInfoResponse) error {
	return h.ServiceUserHandler.GetUserInfo(ctx, in, out)
}
